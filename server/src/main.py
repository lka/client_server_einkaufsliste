"""FastAPI application with SQLite persistence via SQLModel.

This module mounts the client/ static files and exposes a small
CRUD API at /api/items backed by SQLite.
"""

from typing import List
import os
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException
from starlette.staticfiles import StaticFiles
from sqlmodel import select

from .models import Item
from .db import get_engine, create_db_and_tables, get_session


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan context manager for the FastAPI application.

    Creates the database engine and ensures tables exist before the app
    starts serving requests. This replaces the deprecated startup event
    decorator.
    """
    engine = get_engine()
    create_db_and_tables(engine)
    try:
        yield
    finally:
        # place for shutdown logic if needed in future
        pass


app = FastAPI(title="Einkaufsliste API", lifespan=lifespan)

# Calculate client directory relative to this module and normalize the path.
BASE_DIR = os.path.dirname(__file__)
CLIENT_DIR = os.path.normpath(os.path.join(BASE_DIR, "..", "..", "client"))

# Note: static files are mounted after API route definitions so they do not
# shadow API endpoints (mounting at '/' before route registration can
# intercept and return 404 for API paths).


@app.get("/api/items", response_model=List[Item])
def read_items():
    """Read all items from the database.

    Returns:
        List[Item]: All items stored in the database.
    """
    with get_session() as session:
        items = session.exec(select(Item)).all()
        return items


@app.post("/api/items", status_code=201, response_model=Item)
def create_item(item: Item):
    """Create a new item in the database.

    Args:
        item (Item): Item payload to create. The id will be autogenerated
            if not provided.

    Returns:
        Item: The created item with assigned id.
    """
    import uuid

    # Generate UUID if not provided
    if not item.id:
        item.id = str(uuid.uuid4())
    with get_session() as session:
        session.add(item)
        session.commit()
        session.refresh(item)
        return item


@app.delete("/api/items/{item_id}", status_code=204)
def delete_item(item_id: str):
    """Delete an item by its id from the database.

    Args:
        item_id (str): The id of the item to delete.

    Raises:
        HTTPException: If the item does not exist (404).
    """
    with get_session() as session:
        item = session.get(Item, item_id)
        if not item:
            raise HTTPException(status_code=404, detail="Not found")
        session.delete(item)
        session.commit()
        return None


# Mount client static files (index.html at root)
app.mount("/", StaticFiles(directory=CLIENT_DIR, html=True), name="static")


if __name__ == "__main__":
    # Run dev server (use uvicorn for auto-reload in development)
    import uvicorn

    uvicorn.run("server.main:app", host="0.0.0.0", port=8000, reload=True)
